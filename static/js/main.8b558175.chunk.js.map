{"version":3,"sources":["Setting.js","Numbers.js","App.js","reportWebVitals.js","index.js"],"names":["Modal","setAppElement","Setting","time","cellWidth","initialLivePercent","handleSubmit","useState","isOpen","setIsOpen","style","position","top","left","fontSize","onClick","shouldCloseOnOverlayClick","onRequestClose","content","width","height","onSubmit","className","htmlFor","id","defaultValue","placeholder","name","display","justifyContent","type","Numbers","generation","population","generationPopulation","populationChangePercent","bottom","overlay","backgroundColor","color","data","x","y","padding","Cell","status","border","App","numberOfRows","setNumberOfRows","numberOfColumns","setNumberOfColumns","cells","setCells","interval","useRef","urlSearchParams","URLSearchParams","window","location","search","params","Object","fromEntries","entries","getSettingsFromQueryParams","setting","setPopulation","setGeneration","setGenerationPopulation","setPopulationChangePercent","useEffect","rows","Math","round","innerHeight","columns","innerWidth","_cells","Array","_population","i","fill","j","random","nextGeneration","useCallback","getNeighbours","rowIndex","columnIndex","north","getNorth","south","getSouth","east","getEast","west","getWest","northEast","getNorthEast","northWest","getNorthWest","southEast","getSouthEast","southWest","getSouthWest","newState","cellNeighbours","liveNeighbours","values","filter","n","current","length","_populationChangePercent","change","setInterval","clearInterval","gridTemplateColumns","map","column","columnsIndex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b558175.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport Modal from \"react-modal\";\nModal.setAppElement(\"#root\");\n\nfunction Setting({ time, cellWidth, initialLivePercent, handleSubmit }) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div style={{ position: \"fixed\", top: 0, left: 0 }}>\n      <button style={{ fontSize: \"1.5rem\" }} onClick={() => setIsOpen(!isOpen)}>\n        ‚öôÔ∏è\n      </button>\n      <Modal\n        isOpen={isOpen}\n        shouldCloseOnOverlayClick={true}\n        onRequestClose={() => setIsOpen(false)}\n        style={{ content: { width: \"max-content\", height: \"max-content\" } }}\n      >\n        <form onSubmit={handleSubmit}>\n          <div className=\"input\">\n            <label htmlFor=\"time\">Interval ms</label>\n            <input\n              id=\"time\"\n              defaultValue={time}\n              placeholder=\"Interval in ms\"\n              name=\"time\"\n            />\n          </div>\n          <div className=\"input\">\n            <label htmlFor=\"cellWidth\">Cell Width in pixel</label>\n            <input\n              id=\"cellWidth\"\n              defaultValue={cellWidth}\n              placeholder=\"Cell Width px\"\n              name=\"cellWidth\"\n            />\n          </div>\n          <div className=\"input\">\n            <label htmlFor=\"initialLivePercent\">Initial Live Percentage</label>\n            <input\n              id=\"initialLivePercent\"\n              defaultValue={initialLivePercent}\n              placeholder=\"Initial Live Percent\"\n              name=\"initialLivePercent\"\n            />\n          </div>\n          <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n            <button type=\"submit\">Submit and start over</button>\n            <button onClick={() => setIsOpen(false)}>Close</button>\n          </div>\n        </form>\n      </Modal>\n    </div>\n  );\n}\n\nexport default Setting;\n","import { useState } from \"react\";\nimport Modal from \"react-modal\";\nimport { VictoryChart, VictoryLine } from \"victory\";\nimport { CSVLink } from \"react-csv\";\nModal.setAppElement(\"#root\");\n\nfunction Numbers({\n  generation,\n  population,\n  generationPopulation,\n  populationChangePercent,\n}) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <div style={{ position: \"fixed\", bottom: 0, left: 0 }}>\n      <button style={{ fontSize: \"1.5rem\" }} onClick={() => setIsOpen(!isOpen)}>\n        üñ•\n      </button>\n      <Modal\n        isOpen={isOpen}\n        shouldCloseOnOverlayClick={true}\n        onRequestClose={() => setIsOpen(false)}\n        style={{\n          content: { width: \"max-content\", height: \"max-content\" },\n          overlay: { backgroundColor: \"transparent\" },\n        }}\n      >\n        <table>\n          <thead>\n            <tr>\n              <th>Generation</th>\n              <th>Population</th>\n              <th>Change</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <th>{generation}</th>\n              <th>{population}</th>\n              <th\n                style={{ color: populationChangePercent > 0 ? \"green\" : \"red\" }}\n              >\n                {populationChangePercent}\n              </th>\n            </tr>\n          </tbody>\n        </table>\n        <VictoryChart height={400} width={400}>\n          <VictoryLine\n            data={generationPopulation}\n            x=\"generation\"\n            y=\"population\"\n          />\n        </VictoryChart>\n        <CSVLink data={generationPopulation} style={{ padding: \".5rem\" }}>\n          Download data in csv\n        </CSVLink>\n        <button onClick={() => setIsOpen(false)}>Close</button>\n      </Modal>\n    </div>\n  );\n}\n\nexport default Numbers;\n","import \"./App.css\";\nimport { useEffect, useState, useRef, useCallback } from \"react\";\nimport Setting from \"./Setting\";\nimport Numbers from \"./Numbers\";\n\nfunction getSettingsFromQueryParams() {\n  const defaultSettings = {\n    time: 200,\n    cellWidth: 10,\n    initialLivePercent: 10,\n  };\n  const urlSearchParams = new URLSearchParams(window.location.search);\n  const params = Object.fromEntries(urlSearchParams.entries());\n  const newSettings = { ...defaultSettings, ...params };\n  return newSettings;\n}\nfunction App() {\n  const [numberOfRows, setNumberOfRows] = useState(0);\n  const [numberOfColumns, setNumberOfColumns] = useState(0);\n  const [cells, setCells] = useState([]);\n  const interval = useRef();\n  const [setting] = useState(() => getSettingsFromQueryParams());\n  const [population, setPopulation] = useState(0);\n  const [generation, setGeneration] = useState(0);\n  const [generationPopulation, setGenerationPopulation] = useState([]);\n  const [populationChangePercent, setPopulationChangePercent] = useState(0);\n\n  useEffect(() => {\n    const rows = Math.round(window.innerHeight / setting.cellWidth);\n    const columns = Math.round(window.innerWidth / setting.cellWidth);\n    setNumberOfRows(rows);\n    setNumberOfColumns(columns);\n  }, [setting.cellWidth]);\n\n  useEffect(() => {\n    const _cells = new Array(numberOfRows);\n    let _population = 0;\n    for (let i = 0; i < numberOfRows; i++) {\n      _cells[i] = new Array(numberOfColumns).fill(0, 0);\n      for (let j = 0; j < numberOfColumns; j++) {\n        _cells[i][j] =\n          Math.random() * numberOfRows * numberOfColumns <\n          (numberOfColumns * numberOfRows * setting.initialLivePercent) / 100\n            ? 1\n            : 0;\n        if (_cells[i][j] === 1) {\n          _population++;\n        }\n      }\n    }\n\n    setCells(_cells);\n    setPopulation(_population);\n  }, [numberOfRows, numberOfColumns, setting.initialLivePercent]);\n\n  const nextGeneration = useCallback(() => {\n    function getNorth(rowIndex, columnIndex) {\n      if (rowIndex - 1 > 0) {\n        return cells[rowIndex - 1][columnIndex];\n      }\n      return undefined;\n    }\n    function getSouth(rowIndex, columnIndex) {\n      if (rowIndex + 1 < numberOfRows) {\n        return cells[rowIndex + 1][columnIndex];\n      }\n      return undefined;\n    }\n    function getEast(rowIndex, columnIndex) {\n      if (columnIndex + 1 < numberOfColumns) {\n        return cells[rowIndex][columnIndex + 1];\n      }\n      return undefined;\n    }\n    function getWest(rowIndex, columnIndex) {\n      if (columnIndex - 1 > 0) {\n        return cells[rowIndex][columnIndex - 1];\n      }\n      return undefined;\n    }\n    function getNorthEast(rowIndex, columnIndex) {\n      if (columnIndex + 1 < numberOfColumns && rowIndex - 1 > 0) {\n        return cells[rowIndex - 1][columnIndex + 1];\n      }\n      return undefined;\n    }\n    function getNorthWest(rowIndex, columnIndex) {\n      if (columnIndex - 1 > 0 && rowIndex - 1 > 0) {\n        return cells[rowIndex - 1][columnIndex - 1];\n      }\n      return undefined;\n    }\n    function getSouthEast(rowIndex, columnIndex) {\n      if (columnIndex + 1 < numberOfColumns && rowIndex + 1 < numberOfRows) {\n        return cells[rowIndex + 1][columnIndex + 1];\n      }\n      return undefined;\n    }\n    function getSouthWest(rowIndex, columnIndex) {\n      if (columnIndex - 1 > 0 && rowIndex + 1 < numberOfRows) {\n        return cells[rowIndex + 1][columnIndex - 1];\n      }\n      return undefined;\n    }\n    function getNeighbours(rowIndex, columnIndex) {\n      const north = getNorth(rowIndex, columnIndex);\n      const south = getSouth(rowIndex, columnIndex);\n      const east = getEast(rowIndex, columnIndex);\n      const west = getWest(rowIndex, columnIndex);\n      const northEast = getNorthEast(rowIndex, columnIndex);\n      const northWest = getNorthWest(rowIndex, columnIndex);\n      const southEast = getSouthEast(rowIndex, columnIndex);\n      const southWest = getSouthWest(rowIndex, columnIndex);\n\n      return {\n        north,\n        south,\n        east,\n        west,\n        northWest,\n        northEast,\n        southEast,\n        southWest,\n      };\n    }\n\n    let newState = cells;\n    let _population = population;\n    for (let i = 0; i < numberOfRows; i++) {\n      for (let j = 0; j < numberOfColumns; j++) {\n        const cellNeighbours = getNeighbours(i, j);\n        const liveNeighbours = Object.values(cellNeighbours).filter(\n          (n) => n === 1\n        );\n\n        const current = cells[i][j];\n        if (current === 1 && liveNeighbours.length < 2) {\n          //underpopulation\n          newState[i][j] = 0;\n          _population--;\n        } else if (\n          current === 1 &&\n          (liveNeighbours.length === 2 || liveNeighbours.length === 3)\n        ) {\n          // survive\n          newState[i][j] = 1;\n        } else if (current === 1 && liveNeighbours.length > 3) {\n          //overpopulation\n\n          newState[i][j] = 0;\n          _population--;\n        } else if (current === 0 && liveNeighbours.length === 3) {\n          //reproduction\n\n          newState[i][j] = 1;\n          _population++;\n        }\n      }\n    }\n\n    const _populationChangePercent = Math.round(\n      ((_population - population) / population) * 100\n    );\n    setCells([...newState]);\n    setGenerationPopulation([\n      ...generationPopulation,\n      { generation, population, change: _populationChangePercent },\n    ]);\n    setPopulationChangePercent(_populationChangePercent);\n    setPopulation(_population);\n    setGeneration(generation + 1);\n  }, [\n    cells,\n    numberOfColumns,\n    numberOfRows,\n    population,\n    generation,\n    generationPopulation,\n  ]);\n\n  useEffect(() => {\n    interval.current = setInterval(nextGeneration, setting.time);\n\n    return () => clearInterval(interval.current);\n  }, [nextGeneration, setting.time]);\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        display: \"grid\",\n        gridTemplateColumns: `repeat(${numberOfColumns},1fr)`,\n      }}\n    >\n      <Setting {...setting} />\n      {cells.map((rows, rowIndex) => {\n        return rows.map((column, columnsIndex) => (\n          <Cell\n            key={`${rowIndex}-${columnsIndex}`}\n            status={cells[rowIndex][columnsIndex]}\n            cellWidth={setting.cellWidth}\n          />\n        ));\n      })}\n      <Numbers\n        population={population}\n        generation={generation}\n        generationPopulation={generationPopulation}\n        populationChangePercent={populationChangePercent}\n      />\n    </div>\n  );\n}\n\nfunction Cell({ status, cellWidth }) {\n  return (\n    <div\n      style={{\n        width: `${cellWidth}px`,\n        height: `${cellWidth}px`,\n        border: \"1px solid black\",\n        backgroundColor: `${status === 0 ? \"#000\" : \"#fff\"}`,\n        display: \"grid\",\n      }}\n    />\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}